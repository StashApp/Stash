// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/stashapp/stash/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ImageReaderWriter is an autogenerated mock type for the ImageReaderWriter type
type ImageReaderWriter struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *ImageReaderWriter) All() ([]*models.Image, error) {
	ret := _m.Called()

	var r0 []*models.Image
	if rf, ok := ret.Get(0).(func() []*models.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: newImage
func (_m *ImageReaderWriter) Create(newImage models.Image) (*models.Image, error) {
	ret := _m.Called(newImage)

	var r0 *models.Image
	if rf, ok := ret.Get(0).(func(models.Image) *models.Image); ok {
		r0 = rf(newImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Image) error); ok {
		r1 = rf(newImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByChecksum provides a mock function with given fields: checksum
func (_m *ImageReaderWriter) FindByChecksum(checksum string) (*models.Image, error) {
	ret := _m.Called(checksum)

	var r0 *models.Image
	if rf, ok := ret.Get(0).(func(string) *models.Image); ok {
		r0 = rf(checksum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByGalleryID provides a mock function with given fields: galleryID
func (_m *ImageReaderWriter) FindByGalleryID(galleryID int) ([]*models.Image, error) {
	ret := _m.Called(galleryID)

	var r0 []*models.Image
	if rf, ok := ret.Get(0).(func(int) []*models.Image); ok {
		r0 = rf(galleryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(galleryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ids
func (_m *ImageReaderWriter) FindMany(ids []int) ([]*models.Image, error) {
	ret := _m.Called(ids)

	var r0 []*models.Image
	if rf, ok := ret.Get(0).(func([]int) []*models.Image); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updatedImage
func (_m *ImageReaderWriter) Update(updatedImage models.ImagePartial) (*models.Image, error) {
	ret := _m.Called(updatedImage)

	var r0 *models.Image
	if rf, ok := ret.Get(0).(func(models.ImagePartial) *models.Image); ok {
		r0 = rf(updatedImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ImagePartial) error); ok {
		r1 = rf(updatedImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFull provides a mock function with given fields: updatedImage
func (_m *ImageReaderWriter) UpdateFull(updatedImage models.Image) (*models.Image, error) {
	ret := _m.Called(updatedImage)

	var r0 *models.Image
	if rf, ok := ret.Get(0).(func(models.Image) *models.Image); ok {
		r0 = rf(updatedImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Image) error); ok {
		r1 = rf(updatedImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
