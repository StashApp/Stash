// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/stashapp/stash/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SceneReaderWriter is an autogenerated mock type for the SceneReaderWriter type
type SceneReaderWriter struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *SceneReaderWriter) All() ([]*models.Scene, error) {
	ret := _m.Called()

	var r0 []*models.Scene
	if rf, ok := ret.Get(0).(func() []*models.Scene); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: newScene
func (_m *SceneReaderWriter) Create(newScene models.Scene) (*models.Scene, error) {
	ret := _m.Called(newScene)

	var r0 *models.Scene
	if rf, ok := ret.Get(0).(func(models.Scene) *models.Scene); ok {
		r0 = rf(newScene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Scene) error); ok {
		r1 = rf(newScene)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByChecksum provides a mock function with given fields: checksum
func (_m *SceneReaderWriter) FindByChecksum(checksum string) (*models.Scene, error) {
	ret := _m.Called(checksum)

	var r0 *models.Scene
	if rf, ok := ret.Get(0).(func(string) *models.Scene); ok {
		r0 = rf(checksum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMovieID provides a mock function with given fields: movieID
func (_m *SceneReaderWriter) FindByMovieID(movieID int) ([]*models.Scene, error) {
	ret := _m.Called(movieID)

	var r0 []*models.Scene
	if rf, ok := ret.Get(0).(func(int) []*models.Scene); ok {
		r0 = rf(movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(movieID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOSHash provides a mock function with given fields: oshash
func (_m *SceneReaderWriter) FindByOSHash(oshash string) (*models.Scene, error) {
	ret := _m.Called(oshash)

	var r0 *models.Scene
	if rf, ok := ret.Get(0).(func(string) *models.Scene); ok {
		r0 = rf(oshash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(oshash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ids
func (_m *SceneReaderWriter) FindMany(ids []int) ([]*models.Scene, error) {
	ret := _m.Called(ids)

	var r0 []*models.Scene
	if rf, ok := ret.Get(0).(func([]int) []*models.Scene); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSceneCover provides a mock function with given fields: sceneID
func (_m *SceneReaderWriter) GetSceneCover(sceneID int) ([]byte, error) {
	ret := _m.Called(sceneID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(sceneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(sceneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updatedScene
func (_m *SceneReaderWriter) Update(updatedScene models.ScenePartial) (*models.Scene, error) {
	ret := _m.Called(updatedScene)

	var r0 *models.Scene
	if rf, ok := ret.Get(0).(func(models.ScenePartial) *models.Scene); ok {
		r0 = rf(updatedScene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ScenePartial) error); ok {
		r1 = rf(updatedScene)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFull provides a mock function with given fields: updatedScene
func (_m *SceneReaderWriter) UpdateFull(updatedScene models.Scene) (*models.Scene, error) {
	ret := _m.Called(updatedScene)

	var r0 *models.Scene
	if rf, ok := ret.Get(0).(func(models.Scene) *models.Scene); ok {
		r0 = rf(updatedScene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Scene)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Scene) error); ok {
		r1 = rf(updatedScene)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSceneCover provides a mock function with given fields: sceneID, cover
func (_m *SceneReaderWriter) UpdateSceneCover(sceneID int, cover []byte) error {
	ret := _m.Called(sceneID, cover)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(sceneID, cover)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
