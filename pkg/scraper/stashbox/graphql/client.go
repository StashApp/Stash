// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}
type URLFragment struct {
	URL  string
	Type string
}
type ImageFragment struct {
	ID     string
	URL    string
	Width  *int
	Height *int
}
type StudioFragment struct {
	Name   string
	ID     string
	Urls   []*URLFragment
	Images []*ImageFragment
}
type TagFragment struct {
	Name string
	ID   string
}
type FuzzyDateFragment struct {
	Date     string
	Accuracy DateAccuracyEnum
}
type MeasurementsFragment struct {
	BandSize *int    `json:"band_size" graphql:"band_size"`
	CupSize  *string `json:"cup_size" graphql:"cup_size"`
	Waist    *int
	Hip      *int
}
type BodyModificationFragment struct {
	Location    string
	Description *string
}
type PerformerFragment struct {
	ID              string
	Name            string
	Disambiguation  *string
	Aliases         []string
	Gender          *GenderEnum
	Urls            []*URLFragment
	Images          []*ImageFragment
	Birthdate       *FuzzyDateFragment
	Ethnicity       *EthnicityEnum
	Country         *string
	EyeColor        *EyeColorEnum  `json:"eye_color" graphql:"eye_color"`
	HairColor       *HairColorEnum `json:"hair_color" graphql:"hair_color"`
	Height          *int
	Measurements    MeasurementsFragment
	BreastType      *BreastTypeEnum `json:"breast_type" graphql:"breast_type"`
	CareerStartYear *int            `json:"career_start_year" graphql:"career_start_year"`
	CareerEndYear   *int            `json:"career_end_year" graphql:"career_end_year"`
	Tattoos         []*BodyModificationFragment
	Piercings       []*BodyModificationFragment
}
type PerformerAppearanceFragment struct {
	As        *string
	Performer PerformerFragment
}
type FingerprintFragment struct {
	Algorithm FingerprintAlgorithm
	Hash      string
	Duration  int
}
type SceneFragment struct {
	ID           string
	Title        *string
	Details      *string
	Duration     *int
	Date         *string
	Urls         []*URLFragment
	Images       []*ImageFragment
	Studio       *StudioFragment
	Tags         []*TagFragment
	Performers   []*PerformerAppearanceFragment
	Fingerprints []*FingerprintFragment
}
type FindSceneByFingerprint struct{ FindSceneByFingerprint []*SceneFragment }
type SearchScene struct{ SearchScene []*SceneFragment }
type SubmitFingerprintPayload struct{ SubmitFingerprint bool }

const FindSceneByFingerprintQuery = `query FindSceneByFingerprint ($fingerprint: FingerprintQueryInput!) {
	findSceneByFingerprint(fingerprint: $fingerprint) {
		... SceneFragment
	}
}
fragment BodyModificationFragment on BodyModification {
	location
	description
}
fragment FingerprintFragment on Fingerprint {
	algorithm
	hash
	duration
}
fragment ImageFragment on Image {
	id
	url
	width
	height
}
fragment StudioFragment on Studio {
	name
	id
	urls {
		... URLFragment
	}
	images {
		... ImageFragment
	}
}
fragment TagFragment on Tag {
	name
	id
}
fragment PerformerAppearanceFragment on PerformerAppearance {
	as
	performer {
		... PerformerFragment
	}
}
fragment MeasurementsFragment on Measurements {
	band_size
	cup_size
	waist
	hip
}
fragment SceneFragment on Scene {
	id
	title
	details
	duration
	date
	urls {
		... URLFragment
	}
	images {
		... ImageFragment
	}
	studio {
		... StudioFragment
	}
	tags {
		... TagFragment
	}
	performers {
		... PerformerAppearanceFragment
	}
	fingerprints {
		... FingerprintFragment
	}
}
fragment URLFragment on URL {
	url
	type
}
fragment PerformerFragment on Performer {
	id
	name
	disambiguation
	aliases
	gender
	urls {
		... URLFragment
	}
	images {
		... ImageFragment
	}
	birthdate {
		... FuzzyDateFragment
	}
	ethnicity
	country
	eye_color
	hair_color
	height
	measurements {
		... MeasurementsFragment
	}
	breast_type
	career_start_year
	career_end_year
	tattoos {
		... BodyModificationFragment
	}
	piercings {
		... BodyModificationFragment
	}
}
fragment FuzzyDateFragment on FuzzyDate {
	date
	accuracy
}
`

func (c *Client) FindSceneByFingerprint(ctx context.Context, fingerprint FingerprintQueryInput, httpRequestOptions ...client.HTTPRequestOption) (*FindSceneByFingerprint, error) {
	vars := map[string]interface{}{
		"fingerprint": fingerprint,
	}

	var res FindSceneByFingerprint
	if err := c.Client.Post(ctx, FindSceneByFingerprintQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SearchSceneQuery = `query SearchScene ($term: String!) {
	searchScene(term: $term) {
		... SceneFragment
	}
}
fragment BodyModificationFragment on BodyModification {
	location
	description
}
fragment FingerprintFragment on Fingerprint {
	algorithm
	hash
	duration
}
fragment TagFragment on Tag {
	name
	id
}
fragment PerformerAppearanceFragment on PerformerAppearance {
	as
	performer {
		... PerformerFragment
	}
}
fragment PerformerFragment on Performer {
	id
	name
	disambiguation
	aliases
	gender
	urls {
		... URLFragment
	}
	images {
		... ImageFragment
	}
	birthdate {
		... FuzzyDateFragment
	}
	ethnicity
	country
	eye_color
	hair_color
	height
	measurements {
		... MeasurementsFragment
	}
	breast_type
	career_start_year
	career_end_year
	tattoos {
		... BodyModificationFragment
	}
	piercings {
		... BodyModificationFragment
	}
}
fragment FuzzyDateFragment on FuzzyDate {
	date
	accuracy
}
fragment MeasurementsFragment on Measurements {
	band_size
	cup_size
	waist
	hip
}
fragment SceneFragment on Scene {
	id
	title
	details
	duration
	date
	urls {
		... URLFragment
	}
	images {
		... ImageFragment
	}
	studio {
		... StudioFragment
	}
	tags {
		... TagFragment
	}
	performers {
		... PerformerAppearanceFragment
	}
	fingerprints {
		... FingerprintFragment
	}
}
fragment URLFragment on URL {
	url
	type
}
fragment ImageFragment on Image {
	id
	url
	width
	height
}
fragment StudioFragment on Studio {
	name
	id
	urls {
		... URLFragment
	}
	images {
		... ImageFragment
	}
}
`

func (c *Client) SearchScene(ctx context.Context, term string, httpRequestOptions ...client.HTTPRequestOption) (*SearchScene, error) {
	vars := map[string]interface{}{
		"term": term,
	}

	var res SearchScene
	if err := c.Client.Post(ctx, SearchSceneQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SubmitFingerprintQuery = `mutation SubmitFingerprint ($input: FingerprintSubmission!) {
	submitFingerprint(input: $input)
}
`

func (c *Client) SubmitFingerprint(ctx context.Context, input FingerprintSubmission, httpRequestOptions ...client.HTTPRequestOption) (*SubmitFingerprintPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res SubmitFingerprintPayload
	if err := c.Client.Post(ctx, SubmitFingerprintQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
